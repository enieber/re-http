// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Http = require("bs-node-http/src/Http.js");
var List = require("bs-platform/lib/js/list.js");
var Http$1 = require("http");
var Curry = require("bs-platform/lib/js/curry.js");

function bodyResponse(response, statusCode, message) {
  var arg = function (param, param$1) {
    return Http.ServerResponse.write(message, param, param$1);
  };
  arg(undefined, Http.ServerResponse.setStatusCode(statusCode, response)).end();
  
}

function bodyJsonResponse(response, statusCode, message) {
  var arg = function (param, param$1) {
    return Http.ServerResponse.write(message, param, param$1);
  };
  arg(undefined, Http.ServerResponse.setStatusCode(statusCode, Http.ServerResponse.setHeader("content-type", "application/json", response))).end();
  
}

var Rest = {
  bodyResponse: bodyResponse,
  bodyJsonResponse: bodyJsonResponse
};

function run(param, response) {
  return bodyResponse(response, 404, "File not Found");
}

var ResponseNotFound = {
  run: run
};

function methodString(methodType) {
  switch (methodType) {
    case /* GET */0 :
        return "GET";
    case /* POST */1 :
        return "POST";
    case /* PUT */2 :
        return "PUT";
    case /* UPDATE */3 :
        return "UPDATE";
    case /* DELETE */4 :
        return "DELETE";
    case /* HEAD */5 :
        return "HEAD";
    case /* OPTION */6 :
        return "OPTION";
    case /* CONNECT */7 :
        return "CONNECT";
    case /* TRACE */8 :
        return "TRACE";
    case /* PATCH */9 :
        return "PATCH";
    
  }
}

function getMethod(method_) {
  if (method_ >= 492530731) {
    if (method_ !== 801894688) {
      if (method_ >= 965227017) {
        if (method_ >= 994393768) {
          return /* PATCH */9;
        } else {
          return /* UPDATE */3;
        }
      } else if (method_ >= 891112544) {
        return /* POST */1;
      } else {
        return /* DELETE */4;
      }
    } else {
      return /* HEAD */5;
    }
  } else if (method_ !== 3546230) {
    if (method_ >= 336447077) {
      if (method_ >= 357830602) {
        return /* CONNECT */7;
      } else {
        return /* TRACE */8;
      }
    } else if (method_ >= 3997359) {
      return /* PUT */2;
    } else {
      return /* OPTION */6;
    }
  } else {
    return /* GET */0;
  }
}

var Method = {
  methodString: methodString,
  getMethod: getMethod
};

function start(request, response, routers) {
  var methodHttp = getMethod(Http.ClientRequest.getMethod(request));
  var uri = Http.ClientRequest.getUrl(request);
  return List.map((function (router) {
                var metheod = router.method;
                var uriString = router.uri;
                if (metheod === methodHttp && uri === uriString) {
                  return Curry._2(router.action, request, response);
                }
                
              }), routers);
}

var Routers = {
  start: start
};

function transformTring(method_) {
  return String(method_);
}

function renderRouterItem(method_, uri) {
  console.log(methodString(method_) + (": " + uri));
  
}

function renderRouters(routers) {
  return List.map((function (router) {
                return renderRouterItem(router.method, router.uri);
              }), routers);
}

var Log = {
  transformTring: transformTring,
  renderRouterItem: renderRouterItem,
  renderRouters: renderRouters
};

function start$1(routers, port) {
  var app = Http$1.createServer((function (request, response) {
          return start(request, response, routers);
        }));
  renderRouters(routers);
  app.listen(port);
  console.log("server running in localhost:" + port.toString());
  
}

var Server = {
  start: start$1
};

exports.Rest = Rest;
exports.ResponseNotFound = ResponseNotFound;
exports.Method = Method;
exports.Routers = Routers;
exports.Log = Log;
exports.Server = Server;
/* http Not a pure module */
